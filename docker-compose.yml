services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - web
    depends_on:
      go_launay:
        condition: service_started
      minio:
        condition: service_healthy
  certbot:
    image: certbot/certbot:latest
    restart: unless-stopped
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "
        certbot certonly --webroot --webroot-path /var/www/certbot
           --domain $${APP_DOMAIN}
           --email $${LE_EMAIL}
           --agree-tos --non-interactive &&
        trap exit TERM;
        while :; do
          certbot renew --quiet --webroot -w /var/www/certbot --post-hook 'nginx -s reload';
          sleep 12h;
        done
      "
    networks:
      - web

  go_launay:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: go_launay:latest
    restart: always
    expose:
      - "${APP_PORT}"
    environment:
      REDIS_ADDRESS: "redis:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      DB_HOST: "db"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_NAME: "${DB_NAME}"
      DB_PORT: "5432"
      DB_SSLMODE: "disable"
      DB_TIMEZONE: "${DB_TIMEZONE}"
      JWT_SECRET: "${JWT_SECRET}"
      APP_PORT: "${APP_PORT}"
      WS_ALLOWED_ORIGINS: "*"
      STORAGE_ENDPOINT: "http://minio:9000"
      STORAGE_BUCKET: "avatars"
      STORAGE_PUBLIC_URL: "https://${APP_DOMAIN}/storage"
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_UPLOAD_USER: "${MINIO_UPLOAD_USER}"
      MINIO_UPLOAD_PASSWORD: "${MINIO_UPLOAD_PASSWORD}"
    networks:
      - web
      - internal
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      minio:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    volumes:
      - minio_data:/data
    expose:
      - "9000"
      - "9001"
    networks:
      - web
      - internal
    healthcheck:
      test: >
        sh -c "mc alias set local http://127.0.0.1:9000 \
          $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} >/dev/null"
      interval: 15s
      timeout: 5s
      retries: 5

  minio-init:
    image: minio/mc:latest
    restart: "no"
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - internal
    environment:
      STORAGE_BUCKET: "${STORAGE_BUCKET}"
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_UPLOAD_USER: "${MINIO_UPLOAD_USER}"
      MINIO_UPLOAD_PASSWORD: "${MINIO_UPLOAD_PASSWORD}"
    entrypoint: >
      /bin/sh -c "
        mc alias set local http://minio:9000 \
          $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} &&
        mc admin user add   local $${MINIO_UPLOAD_USER} $${MINIO_UPLOAD_PASSWORD} &&
        mc admin policy set local writeonly user=$${MINIO_UPLOAD_USER} &&
        mc mb --ignore-existing local/$${STORAGE_BUCKET} &&
        mc anonymous set download local/$${STORAGE_BUCKET} &&
        echo 'âœ” MinIO ready; upload user created';
      "

  redis:
    image: "${REDIS_IMAGE}:${REDIS_TAG}"
    command:
      - redis-server
      - --appendonly yes
      - --notify-keyspace-events Ex
    volumes:
      - redis:/data
    networks:
      - internal
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 3s
      retries: 3

  db:
    image: "${POSTGRES_IMAGE}:${POSTGRES_TAG}"
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  web:
    external: false
  internal:
    internal: true

volumes:
  pgdata:
  redis:
  minio_data:
