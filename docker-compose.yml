services:
  redis:
    image: "${REDIS_IMAGE}:${REDIS_TAG}"
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.redis.entrypoints=websecure"
      - "traefik.tcp.routers.redis.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.redis.tls=true"
      - "traefik.tcp.services.redis.loadbalancer.server.port=6379"
    volumes:
      - redis:/data
    command:
      - redis-server
      - --appendonly
      - "yes"
      - --notify-keyspace-events
      - "Ex"
    networks: [internal]
    expose: ["6379"]

  db:
    image: "${POSTGRES_IMAGE}:${POSTGRES_TAG}"
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [internal]
    expose: ["5432"]

  seaweedfs:
    image: "${SEAWEED_IMAGE}:${SEAWEED_TAG}"
    container_name: seaweedfs
    ports:
      - "${SEAWEED_MASTER_PORT}:${SEAWEED_MASTER_PORT}"
      - "${SEAWEED_FILER_PORT}:${SEAWEED_FILER_PORT}"
      - "${SEAWEED_S3_PORT}:${SEAWEED_S3_PORT}"
    command:
      - server
      - "-ip=0.0.0.0"
      - "-master.port=${SEAWEED_MASTER_PORT}"
      - "-filer"
      - "-filer.port=${SEAWEED_FILER_PORT}"
      - "-s3"
      - "-s3.port=${SEAWEED_S3_PORT}"
    volumes:
      - seaweedfs:/data
    networks:
      - web

  go_launay:
    build:
      context: "${APP_BUILD_CONTEXT}"
      dockerfile: "${APP_DOCKERFILE}"
    restart: always
    image: go_launay
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.go.rule=Host(`${APP_DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.go.entryPoints=web"
      - "traefik.http.services.go.loadBalancer.server.port=${APP_PORT}"
    environment:
      REDIS_ADDRESS: "redis:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      JWT_SECRET: "${JWT_SECRET}"
      APP_PORT: "${APP_PORT}"
      SEAWEEDFS_URL: "http://seaweedfs:8333"
      DB_HOST: "${DB_HOST}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_NAME: "${DB_NAME}"
      DB_PORT: "${DB_PORT}"
      DB_TIMEZONE: "${DB_TIMEZONE}"
      DB_SSLMODE: "disable"
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      - redis
      - seaweedfs
      - db
    networks:
      - web
      - internal

  traefik:
    image: "${TRAEFIK_IMAGE}:${TRAEFIK_TAG}"
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=${LE_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - traefik.http.routers.traefik.rule=Host(`traefik.launay.one`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$<hash>
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - web
    depends_on:
      - go_launay
      - seaweedfs
      - db
      - redis

networks:
  internal:
    internal: true
  web:
    external: true

volumes:
  pgdata:
  redis:
  seaweedfs:
